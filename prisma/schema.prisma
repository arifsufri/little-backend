generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  Boss
  Staff
  Client
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String?
  avatar    String?  
  role      UserRole  @default(Client)
  isActive  Boolean   @default(false)
  commissionRate Float?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  packages  Package[]
  barberAppointments Appointment[] @relation("AppointmentBarber")
  expenses  Expense[] @relation("ExpenseCreator")
}

model Package {
  id           Int           @id @default(autoincrement())
  name         String
  description  String
  price        Float
  barber       String?
  duration     Int           @default(30)
  discountCode String?
  imageUrl     String?
  isActive     Boolean       @default(true)
  createdBy    Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  // Relations
  creator      User          @relation(fields: [createdBy], references: [id])
  appointments Appointment[] 
}

model Client {
  id           Int           @id @default(autoincrement())
  clientId     String        @unique 
  fullName     String
  phoneNumber  String        @unique 
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  // Relations
  appointments Appointment[] 
}

model Appointment {
  id              Int      @id @default(autoincrement())
  clientId        Int
  packageId       Int
  barberId        Int?   
  status          String   @default("pending") 
  appointmentDate DateTime?
  notes           String?
  additionalPackages Json?  
  customPackages  Json?    
  finalPrice      Float?   
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  client          Client   @relation(fields: [clientId], references: [id])
  package         Package  @relation(fields: [packageId], references: [id])
  barber          User?    @relation("AppointmentBarber", fields: [barberId], references: [id])
}

model Expense {
  id          Int      @id @default(autoincrement())
  category    String   
  description String
  amount      Float
  date        DateTime @default(now())
  createdBy   Int    
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  creator     User     @relation("ExpenseCreator", fields: [createdBy], references: [id])
}
