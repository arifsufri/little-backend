generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  Boss
  Staff
  Client
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String?
  avatar    String?  
  role      UserRole  @default(Client)
  isActive  Boolean   @default(false)
  commissionRate Float? @default(0.0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  packages  Package[]
  barberAppointments Appointment[] @relation("AppointmentBarber")
  expenses  Expense[] @relation("ExpenseCreator")
  discountCodes DiscountCode[] @relation("DiscountCodeCreator")
}

model Package {
  id           Int           @id @default(autoincrement())
  name         String
  description  String
  price        Float
  barber       String?
  duration     Int           @default(30)
  discountCode String?
  imageUrl     String?
  isActive     Boolean       @default(true)
  createdBy    Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  // Relations
  creator      User          @relation(fields: [createdBy], references: [id])
  appointments Appointment[] 
}

model Client {
  id           Int           @id @default(autoincrement())
  clientId     String        @unique 
  fullName     String
  phoneNumber  String        @unique 
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  // Relations
  appointments Appointment[] 
  discountUsages DiscountCodeUsage[]
}

model Appointment {
  id              Int      @id @default(autoincrement())
  clientId        Int
  packageId       Int
  barberId        Int?   
  status          String   @default("pending") 
  appointmentDate DateTime?
  notes           String?
  additionalPackages Json?  
  customPackages  Json?    
  originalPrice   Float?   // Original price before discount (for commission calculation)
  finalPrice      Float?   // Final price after discount (what client pays)
  discountCodeId  Int?     // Applied discount code (legacy - keep for backward compatibility)
  discountAmount  Float?   // Actual discount amount applied (legacy - keep for backward compatibility)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  client          Client   @relation(fields: [clientId], references: [id])
  package         Package  @relation(fields: [packageId], references: [id])
  barber          User?    @relation("AppointmentBarber", fields: [barberId], references: [id])
  discountUsages  DiscountCodeUsage[]
  appliedDiscounts AppointmentDiscount[] // NEW: Multiple discount applications
}

// NEW: Model to handle multiple discount codes per appointment
model AppointmentDiscount {
  id             Int          @id @default(autoincrement())
  appointmentId  Int
  discountCodeId Int
  appliedToPackages Json      // Array of package IDs this discount was applied to
  discountAmount Float       // Amount discounted by this specific code
  createdAt      DateTime    @default(now())
  
  // Relations
  appointment    Appointment  @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  discountCode   DiscountCode @relation(fields: [discountCodeId], references: [id])
  
  // Ensure one discount code per appointment (but allow multiple different codes)
  @@unique([appointmentId, discountCodeId])
}

model Expense {
  id          Int      @id @default(autoincrement())
  category    String   
  description String
  amount      Float
  date        DateTime @default(now())
  createdBy   Int    
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  creator     User     @relation("ExpenseCreator", fields: [createdBy], references: [id])
}

model DiscountCode {
  id              Int      @id @default(autoincrement())
  code            String   @unique
  description     String?
  discountType    String   @default("percentage")
  discountPercent Float?   
  discountAmount  Float?  
  isActive        Boolean  @default(true)
  applicablePackages Int[] @default([]) // Array of package IDs this discount applies to (empty = all packages)
  createdBy       Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  creator         User              @relation("DiscountCodeCreator", fields: [createdBy], references: [id])
  usages          DiscountCodeUsage[]
  appointmentDiscounts AppointmentDiscount[] // NEW: Multiple discount applications
}

model DiscountCodeUsage {
  id             Int          @id @default(autoincrement())
  discountCodeId Int
  clientId       Int
  appointmentId  Int?
  usedAt         DateTime     @default(now())
  
  // Relations
  discountCode   DiscountCode @relation(fields: [discountCodeId], references: [id])
  client         Client       @relation(fields: [clientId], references: [id])
  appointment    Appointment? @relation(fields: [appointmentId], references: [id])
  
  // Ensure one usage per client per discount code
  @@unique([discountCodeId, clientId])
}
